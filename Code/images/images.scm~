#lang racket

(require racket/draw)
 (define-syntax lc
  (syntax-rules (: <- *)
    [(lc expr : var <- drawn-from) (map (lambda (var) expr) drawn-from)]
    [(lc expr : * guard) (if guard (list expr) `())]
    [(lc expr : * guard  qualifier ...) 
     (concat (lc (lc expr : qualifier ...) : guard))]
    [(lc expr : var <- drawn-from  qualifier ...) 
     (concat (lc (lc expr :  qualifier ... ) : var <- drawn-from))]))
 (define (concat l) (foldr (Î» (x y) (append x y)) '() l))
  (define  (make-2d-vector r c initial)
  (build-vector1 r (lambda (x) (make-vector c initial))))

(define (build-vector1 n m)
  (define (helper i)
    (cond ((= i (- n 1)) (list->vector (list (m 1))))
          (else (list->vector (cons (m 2) (vector->list (helper (+ i 1))))))))
  (helper 0))

(define (2d-vector-ref vec r c)
  (vector-ref (vector-ref vec r) c))

(define (2d-vector-set! vec r c val)
  (vector-set! (vector-ref vec r) c val))
 
 (define ~dice-table (make-2d-vector 7 7 #\-))
   (lc  (2d-vector-set! ~dice-table x y (make-object bitmap% (string-append (number->string x) (number->string y) ".jpg")))
        : x <- '(0 1 2 3 4 5 6) y <- '(0 1 2 3 4 5 6))
   
   (define ~S-type1 (make-vector 11 #\-))
   (lc (vector-set! ~s-type1 y  (make-object bitmap% (string-append (number->string x) (number->string y) ".jpg")))
       : x <- '(9) y <- '(0 1 2 3 4 5 6 7 8 9 10))
   
    (define ~S-type2 (make-vector 11 #\-))
   (lc (vector-set! ~s-type2 y  (make-object bitmap% (string-append (number->string x) (number->string y) ".jpg")))
       : x <- '(91) y <- '(0 1 2 3 4 5 6 7 8 9 10))
   
    (define ~S-type3 (make-vector 11 #\-))
   (lc (vector-set! ~s-type3 y  (make-object bitmap% (string-append (number->string x) (number->string y) ".jpg")))
       : x <- '(92) y <- '(0 1 2 3 4 5 6 7 8 9 10))
   
    (define ~HA-type1 (make-vector 16 #\-))
   (lc (vector-set! ~ha-type1 y  (make-object bitmap% (string-append (number->string x) (number->string y) ".jpg")))
       : x <- '(8) y <- '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))
   
   (define ~HB-type1 (make-vector 16 #\-))
   (lc (vector-set! ~hb-type1 y  (make-object bitmap% (string-append (number->string x) (number->string y) ".jpg")))
       : x <- '(7) y <- '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))
   
   (define ~HB-type2 (make-vector 16 #\-))
   (lc (vector-set! ~hb-type2 y  (make-object bitmap% (string-append (number->string x) (number->string y) ".jpg")))
       : x <- '(82) y <- '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))
   
   (define ~B-type1 (make-2d-vector 6 6 #\-))
   (lc  (2d-vector-set! ~bar-type1 x (- y 10) (make-object bitmap% (string-append (number->string x) (number->string y) ".jpg")))
        : x <- '(0 1 2 3 4 5) y <- '(10 11 12 13 14 15))
   
   (define ~B-type3 (make-2d-vector 6 6 #\-))
   (lc  (2d-vector-set! ~bar-type2 x (- y 20) (make-object bitmap% (string-append (number->string x) (number->string y) ".jpg")))
        : x <- '(0 1 2 3 4 5) y <- '(20 21 22 23 24 25))
   
   
   
   
   
   
   
   
   
   
   